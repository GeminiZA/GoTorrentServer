# GoTorrentServer

---

Torrent client with http endpoint interface for remote torrent management

## Interface

### Headers:

All endpoints need the following headers:

- Authorization

### Endpoints:

#### /alldata (**GET**):

- no additional parameters
- Returns json:

```
{
"time": response UTC time string,
"sessions": [
  {
    "name": name,
	"infohash", 20 byte info hash as utf8 string,
    "pieces": bitfield of pieces the client has,
	"timestarted": time session was started,
	"wasted": kb wasted from piece hash failures or cancelled block requests,
	"downloaded": kb downloaded since session start,
	"uploaded": kb downloaded since session start,
	"trackers": [
	  "url": tracker url,
	  "status": working / error,
	  "leechers": int,
	  "seeders": int,
	  "peers": int,
	  "lastannounce": UTC time string
	],
    "Peers": [
	  {
	    "ID": peerID,
	    "host": "IP:port",
	    "pieces": bitfield of pieces the peer has,
	    "down": download rate in kbps,
	    "up": upload rate in kbps,
      "relevence": relevence of peer 0 -> 1
      }
    ],
    "status": connected / disconnected etc
  }
],
}
```

#### /torrentdata (GET)

- Additional query parameters:

  infohash: torrent info hash as string

- Returns json:

```
{
  "name": name,
  "infohash": 20 byte infohash as utf8 string,
  "pieces": bitfield of pieces the client has,
  "timestarted": time session was started,
  "wasted": kb wasted from piece hash failures or cancelled block requests,
  "downloaded": kb downloaded since session start,
  "uploaded": kb downloaded since session start,
  "trackers": [
  "url": tracker url,
  "status": working / error,
  "leechers": int,
  "seeders": int,
  "peers": int,
  "lastannounce": UTC time string
  ],
  "Peers": [
	{
	  "ID": peerID,
	  "host": "IP:port",
	  "pieces": bitfield of pieces the peer has,
	  "down": download rate in kbps,
	  "up": upload rate in kbps,
    "relevence": relevence of peer 0 -> 1
    }
  ],
  "status": connected / disconnected etc
}
```

#### /addmagnet (POST)

- Body:

```
{
  "url": magnet url,
  "targetdir": directory to save the bundle at,
  "maxdown": max download rate in kbps,
  "maxup": max upload rate in kbps,
}
```

- Returns status only

#### /addtorrentfile (POST)

- Additional query parameters:

  - path: path to download target directory
  - start: "true" / "false"
  - maxdown: max download rate in KiB/s (optional)
  - maxup: max upload rate in KiB/s (optional)

- Body: binary metadata file

- Returns status only

#### /stoptorrent (GET)

- Additional query parameters:

  - infohash: hex of the 20 byte infohash

- Returns status only

#### /starttorrent (GET)

- Additional query parameters:

  - infohash: hex of the 20 byte infohash

- Returns status only

#### /removetorrent (GET)

- Additional query parameters:

  - infohash: hex of 20 byte infohash
  - delete: "true" / "false" whether to delete the downloaded torrent data

- Returns status only

#### /setdownrate(GET)

- Additional query parameters:

  - infohash: hex of 20 byte infohash
  - rate: max download rate in KiB/s

- Returns status only

#### /setuprate(GET)

- Additional query parameters:

  - infohash: hex of 20 byte infohash
  - rate: max upload rate in KiB/s

- Returns status only

